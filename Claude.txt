# Power Dialer System Architecture

## Overview
This document outlines the detailed system architecture for the Power Dialer integration with AirCall. The system is designed to automatically progress through a list of phone numbers, making outbound calls via AirCall's API and proceeding to the next number when a call is completed.

## System Components

### 1. Core Application Server
- **Technology**: Node.js/Express
- **Responsibilities**:
  - Manage authentication with AirCall API
  - Process incoming webhook events
  - Coordinate the call flow logic
  - Maintain the call queue
  - Track user availability status
  - Provide API endpoints for the frontend

### 2. Database
- **Technology**: MongoDB
- **Data Models**:
  - Contacts: Store contact information and phone numbers
  - CallQueue: Manage the pipeline of numbers to be called
  - CallHistory: Record details of completed calls
  - UserStatus: Track agent availability
  - SystemConfig: Store configuration parameters
- **Relationships**:
  - Contacts can be added to multiple CallQueues
  - CallHistory references Contacts and Users
  - UserStatus tracks the online/offline state of agents

### 3. Frontend Interface
- **Technology**: React.js or Vue.js
- **Features**:
  - Dashboard showing current dialing status
  - Controls to start/pause/stop the dialer
  - Real-time call status updates
  - Call history and analytics
  - Contact and queue management
  - User status indicators

### 4. AirCall Integration Layer
- **Technology**: Custom middleware
- **Components**:
  - API Client: Handles all communication with AirCall API
  - Webhook Handler: Processes incoming webhook events
  - Authentication Manager: Maintains API credentials
  - Rate Limiter: Ensures compliance with API limits

### 5. Background Job Processor
- **Technology**: Redis with Bull or Celery
- **Jobs**:
  - Schedule next calls in the queue
  - Process webhook events asynchronously
  - Generate reports and analytics
  - Clean up old data

## Data Flow

### 1. Initialization Flow
```
User Interface → Core Application → AirCall API
      ↑             ↓
      └──────── Database ↓
                    ↓
                Job Processor
```

1. User initiates the power dialer from the UI
2. Core application checks user availability via AirCall API
3. If available, system retrieves the first contact from the queue
4. Job processor schedules the first call

### 2. Call Execution Flow
```
AirCall API ← Core Application → Database
     ↓              ↑
Webhook Events → Webhook Handler
```

1. Core application initiates call via AirCall API
2. AirCall sends webhook events as call progresses
3. Webhook handler processes events and updates database
4. Core application monitors call status

### 3. Call Completion Flow
```
Webhook Handler → Core Application → Database
        ↓              ↓
   Job Processor → AirCall API
        ↓
  User Interface
```

1. Webhook handler receives call.ended event
2. Core application updates call history in database
3. Job processor schedules the next call after a configurable delay
4. UI is updated with call results and next call information

## Technical Architecture Diagram
```
┌─────────────────┐      ┌─────────────────┐
│                 │      │                 │
│ User Interface  │ ──── │ Core Application│
│ (Web/Desktop)   │      │ Server          │
│                 │      │                 │
└────────┬────────┘      └────────┬────────┘
         │                        │
         │                        │
         │                        │
┌────────▼────────┐      ┌────────▼────────┐
│                 │      │                 │
│ Database        │ ──── │ Job Processor   │
│                 │      │                 │
│                 │      │                 │
└─────────────────┘      └────────┬────────┘
                                  │
                                  │
                         ┌────────▼────────┐
                         │                 │
                         │ AirCall API     │
                         │ Integration     │
                         │                 │
                         └────────┬────────┘
                                  │
                                  │
                         ┌────────▼────────┐
                         │                 │
                         │ AirCall API     │
                         │                 │
                         │                 │
                         └─────────────────┘
```

## Key Interfaces

### 1. AirCall API Interface
- **Authentication**: OAuth 2.0 or Basic Auth
- **Primary Endpoints**:
  - User availability checking
  - Call initiation
  - Dialer campaign management
- **Webhook Consumption**:
  - Secure endpoint to receive call events
  - Event validation and processing
  - Error handling for missed events

### 2. User Interface API
- **Authentication**: JWT-based
- **Endpoints**:
  - `/api/dialer/start` : Start the power dialer
  - `/api/dialer/pause` : Pause the current dialing session
  - `/api/dialer/stop` : Stop the dialer completely
  - `/api/contacts` : CRUD operations for contacts
  - `/api/queue` : Manage the call queue
  - `/api/history` : Retrieve call history
  - `/api/stats` : Get dialing statistics

### 3. Webhook Receiver
- **Endpoint**: `/webhooks/aircall`
- **Security**: Signature validation
- **Event Processing**:
  - Parse incoming events
  - Update database records
  - Trigger appropriate actions based on event type

## Scalability Considerations

### 1. Horizontal Scaling
- Core application can be deployed across multiple instances
- Load balancer to distribute webhook events
- Database sharding for high-volume operations

### 2. Performance Optimization
- Caching frequently accessed data
- Batch processing for database operations
- Asynchronous processing of non-critical tasks

### 3. Reliability Measures
- Retry logic for failed API calls
- Event queue for webhook processing
- Database transaction management
- Comprehensive error logging and monitoring

## Security Architecture

### 1. Authentication & Authorization
- Secure storage of AirCall API credentials
- Role-based access control for UI
- JWT with short expiration for API access

### 2. Data Protection
- Encryption of sensitive data at rest
- TLS for all API communications
- Input validation on all endpoints

### 3. Monitoring & Auditing
- Comprehensive logging of all operations
- Audit trail for security-relevant actions
- Alerting for suspicious activities

## Deployment Architecture

### 1. Development Environment
- Local development with Docker containers
- Mock AirCall API for testing
- CI/CD pipeline for automated testing

### 2. Production Environment
- Cloud-based deployment (AWS, GCP, or Azure)
- Auto-scaling configuration
- Database backups and redundancy
- CDN for static assets

### 3. Monitoring Setup
- Application performance monitoring
- Real-time error tracking
- Usage analytics
- Health checks and alerting

## Conclusion
This architecture provides a robust foundation for building a scalable, reliable Power Dialer system integrated with AirCall. The modular design allows for future expansion and customization while maintaining a clear separation of concerns between different system components.









Start an outbound call
Outbound calls can be automatically started for a User from their Phone app. It is often used to build a Click-to-call feature!

A Number ID and a phone number to dial must be provided in the request's body.

The User must be available, not on a call and associated to the Number.

Number must be active (validated), inactive numbers can be seen in the Aircall Dashboard.

 This feature is only available on Aircall Phone app on Desktop for now, not yet on iOS and Android.

 Please note, the API doesn’t support multiple sessions. It is not recommended to use this API along with Aircall CTI or Web App when multiple tabs are open

Path params
id
integer
Unique identifier for the User.
Body params
number_id
integer
Unique identifier of the Number to use for the call.
Mandatory field.
to
string
The number to dial in E.164 format.
Mandatory field.
CODE	DESCRIPTION
204	Success.
400	Number not found or invalid number to dial.
405	User not available.
REQUEST
POST /v1/users/:id/calls

{
  "number_id": 123,
  "to": "+18001231234"
}
RESPONSE
Status: 204 No Content